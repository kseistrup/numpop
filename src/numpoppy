#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-
"""
Usage: numpoppy [OPTIONS] [SEED]

positional arguments:
  SEED             initialize random shuffling with SEED

optional arguments:
  -h, --help       show this help message and exit
  -v, --version    show version information and exit
  -c, --copyright  show copying policy and exit
or:
  -s, --simple     use simple box drawing

If a SEED is not given, the random number generator will
be initialized with current time.
"""
##############################################################################
# This program is free software; you can redistribute it and/or modify it    #
# under the terms of the GNU General Public License as published by the Free #
# Software Foundation; either version 3 of the License, or (at your option)  #
# any later version.                                                         #
#                                                                            #
# This program is distributed in the hope that it will be useful, but with-  #
# out any warranty; without even the implied warranty of merchantability or  #
# fitness for a particular purpose. See the GNU General Public License for   #
# more details.  <http://gplv3.fsf.org/>                                     #
##############################################################################

import sys
import os

import argparse
import collections
import pathlib
import pprint
import random

import time
import datetime

import shutil
import tty
import termios

try:
    from locale import (Error, setlocale, LC_ALL)
    _ = setlocale(LC_ALL, '')
except (ImportError, ModuleNotFoundError, NameError, Error):
    pass

__author__ = 'Klaus Alexander Seistrup <klaus@seistrup.dk>'
__whoami__ = 'numpoppy'
__revision__ = '2017-05-02'
__version__ = '0.1.7 ({})'.format(__revision__)
__copyright__ = """\
numpoppy {}

Copyright © 2017 Klaus Alexander Seistrup <klaus@seistrup.dk>

Based on an idea by Pete Deas ⌘ https://petedeas.co.uk/numpop.html

This is free software; see the source for copying conditions. There is no
warranty; not even for merchantability or fitness for a particular purpose.\
""".format(__version__)

DEBUG = os.environ.get('DEBUG', 'False')[0].upper() in '1JTY'  # 1/Ja/True/Yes
EPILOG = """
If a SEED is not given, the random number generator will
be initialized with current time.
"""

(STDIN, STDOUT, STDERR) = (sys.stdin, sys.stdout, sys.stderr)

CONFIG_HOME = os.environ.get('XDG_CONFIG_HOME', '~/.config')
NUMPOPPY_HOME = pathlib.Path(CONFIG_HOME) / __whoami__

# Minimum terminal size required
(MINCOLS, MINROWS) = (60, 16)

BOARDSIZE = 10
BOARD = collections.deque(maxlen=BOARDSIZE)

SEED = None
SCORE = 0
ARROW = 4
TURNS = 10
MOVES = []

DATEFMT = '{:%FT%T}Z'
JSONFMT = '{{"score": "{score}", "seed": "{seed}", "moves": "{moves}"}}'

RESET = '\x1b[0m'
BRIGHT = '\x1b[1m'
DIM = '\x1b[2m'

# Cursors
UP = ('k', '\x1b[A')
DOWN = ('j', '\x1b[B')
RIGHT = ('l', '\x1b[C')
LEFT = ('h', '\x1b[D')

UP_OR_DOWN = UP + DOWN
LEFT_OR_RIGHT = LEFT + RIGHT

# Misc. keys
ENTER = '\r'
SPACE = ' '
CTRL_A = '\x01'
CTRL_C = '\x03'
CTRL_E = '\x05'
ESCESC = '\x1b\x1b'

# Probably Linux specific
HOME = ('\x1bOH', '\x1b[H', CTRL_A, '^', '0')
END = ('\x1bOF', '\x1b[F', CTRL_E, '$')
HOME_OR_END = HOME + END

POP_KEYS = UP_OR_DOWN + (ENTER, SPACE, 'p', 'P')

# Little boxes…
UL_CORNER = ('┌', '+')
LL_CORNER = ('└', '+')
UR_CORNER = ('┐', '+')
LR_CORNER = ('┘', '+')
UPPER_T = ('┬', '—')
LOWER_T = ('┴', '—')
VLINE = ('│', '|')
HLINE = ('─', '—')
DLINE = ('━', '=')

HEADER = r"""{}
 _   _                 ____
| \ | |_   _ _ __ ___ |  _ \ ___  _ __
|  \| | | | | '_ ` _ \| |_) / _ \| '_ \
| |\  | |_| | | | | | |  __/ (_) | |_) |
|_| \_|\__,_|_| |_| |_|_|   \___/| .__/
                                 |_|{}
A game by DrPete

{}https://petedeas.co.uk/numpop.html{}
"""
INSTRUCTIONS = """
{}How to play{}

You have ten turns to gain as many points as you can. Every
turn, you can pop two adjacent numbers A and B, gaining
(A + B) % 10 points.

As a special bonus, if you would gain no points by doing so,
you will gain a turn instead of using one up.

When you pop two numbers, they will be replaced at the site
of popping by the number of points you got, and a random
number will be added at the right-hand-side of the list.
"""
GAMEBOARD = """
{}Game board{}
"""


def debug(head, data=None):
    """Possibly pretty print an object to stderr"""
    if DEBUG:
        pprint.pprint(
            head if data is None else {head: data},
            stream=STDERR
        )


def deuglify(error):
    """Deuglify the EnvironmentError class of errors"""
    debug('ugly', error)

    if not isinstance(error, Exception):
        return error

    nargs = len(error.args)

    if nargs == 1:
        return str(error)

    strerr = getattr(error, 'strerror', None)

    if nargs == 2 and strerr is not None:
        fname1 = getattr(error, 'filename', None)
        fname2 = getattr(error, 'filename2', None)

        if fname1 and fname2:
            return '{}: {} → {}'.format(strerr, fname1, fname2)
        if fname1 or fname2:
            return '{}: {}'.format(strerr, fname1 or fname2)

        return strerr

    # Let's not pretend that we know the nature on the exception
    return error


def die(error=None):
    """Exit gracefully"""
    debug('exit', error)

    if error:
        print(deuglify(error), file=STDERR)

    sys.exit(1 if error else 0)


def getch():
    """Read a character from standard imput"""
    char = None
    fdesc = STDIN.fileno()
    old_attr = termios.tcgetattr(fdesc)

    try:
        tty.setraw(fdesc)
        char = STDIN.read(1)
    finally:
        termios.tcsetattr(fdesc, termios.TCSADRAIN, old_attr)

    return char or ''


def read_key():
    """Read a key from standard input"""
    ch1 = getch()
    if ch1 != '\x1b':
        return ch1
    ch2 = getch()
    if ch2 not in ('[', 'O'):
        return ch1 + ch2
    ch3 = getch()
    if ch3 != '\x33':
        return ch1 + ch2 + ch3
    ch4 = getch()
    return ch1 + ch2 + ch3 + ch4


def csi_command(cmd):
    """Perform a CSI command"""
    STDOUT.write('\x1b[{}'.format(cmd))
    STDOUT.flush()


def cls():
    """Clear screen"""
    STDOUT.write('\x1bc')
    STDOUT.flush()


def clear_eol():
    """Clear to end of line"""
    csi_command('K')


def goto(row=1, column=1):
    """Moves the cursor to row ROW, column COLUMN"""
    csi_command('{row};{column}H'.format(row=row, column=column))


def cursor_down(lines=1):
    """Move the cursor LINES line down"""
    csi_command('{lines}B'.format(lines=lines))


def cursor_horizontal(pos):
    """Put cursor at column POS"""
    csi_command('{}G'.format(pos))


def save_cursor():
    """Save the cursor position"""
    csi_command('s')


def restore_cursor():
    """restore the cursor position"""
    csi_command('u')


def hide_cursor():
    """Hide the cursor"""
    csi_command('?25l')


def show_cursor():
    """Show the cursor"""
    csi_command('?25h')


def cursor_position():
    """Get cursor position → (ROW, COLUMN)"""
    default = (0, 0)   # AKA “we don't know”
    csi_command('6n')  # Returns '\x1b[ROW;COLUMN'
    cpr = []
    char = ''
    while char != '[':
        char = getch()
    char = getch()
    while char != 'R':
        cpr.append(char)
        char = getch()
    if ';' in cpr:
        (row, column) = ''.join(cpr).split(';', 1)
        if row.isdigit() and column.isdigit():
            return (int(row), int(column))
    return default


def display_board(board, bright=BRIGHT, dim=DIM, simple=False):
    """Draw the entire board"""
    ur_corner = UR_CORNER[simple]
    lr_corner = LR_CORNER[simple]
    ul_corner = UL_CORNER[simple]
    ll_corner = LL_CORNER[simple]
    upper_t = UPPER_T[simple]
    lower_t = LOWER_T[simple]
    hline = HLINE[simple]
    vline = VLINE[simple]
    blen = len(board)
    nline = ' '.join(['    {}'.format(n + 1) for n in range(blen-1)])
    tline = (upper_t + hline + upper_t).join([hline * 3] * blen)
    bline = (lower_t + hline + lower_t).join([hline * 3] * blen)
    pline = (vline + '{}p{}' + vline).format(dim, RESET).join(['   '] * blen)
    mline = (vline + '{}o{}' + vline).format(dim, RESET).join(
        [' {}{}{} '.format(bright, board[i], RESET) for i in range(blen)]
    )
    save_cursor()
    print('Seed: {}\n'.format(SEED))
    print(' ' + nline)
    print(ul_corner + tline + ur_corner)
    print(vline + pline + vline)
    print(vline + mline + vline)
    print(vline + pline + vline)
    print(ll_corner + bline + lr_corner)
    clear_eol()
    cursor_horizontal(6 * (ARROW + 1))
    print('{}^{}'.format(bright, RESET))
    print('     Score: {:>5d}'.format(SCORE))
    print('Turns left: {:>5d}'.format(TURNS))
    restore_cursor()


def play(simple=False):
    """Play a game of NumPop"""
    global BOARD, TURNS, SCORE, ARROW, MOVES  # Yucky, but…

    cls()
    goto(1, 1)
    print(HEADER.format(BRIGHT, RESET, DIM, RESET))
    print(DLINE[simple] * 60)
    print(INSTRUCTIONS.format(BRIGHT, RESET))
    print(HLINE[simple] * 60)
    print(GAMEBOARD.format(BRIGHT, RESET))

    hide_cursor()

    for i in range(BOARDSIZE):
        BOARD.append(random.choice(range(10)))

    again = True

    while again and TURNS > 0:
        display_board(BOARD, simple=simple)
        key = read_key()
        if key in ('q', 'Q', CTRL_C, ESCESC):
            again = False
        elif key in LEFT_OR_RIGHT:
            ARROW += (1 if key in RIGHT else -1)
            ARROW %= 9
        elif key in HOME_OR_END:
            ARROW = 0 if key in HOME else 8
        elif key.isdigit() or key in POP_KEYS:
            if key.isdigit():
                idx = int(key) - 1
                if idx < 0 or idx > 8:
                    continue
            else:
                idx = ARROW
            MOVES.append(str(idx+1))
            points = (BOARD[idx] + BOARD[idx+1]) % 10
            BOARD[idx] = points
            del BOARD[idx+1]
            BOARD.append(random.choice(range(10)))
            if points == 0:
                TURNS += 1
            else:
                SCORE += points
                TURNS -= 1
                again = TURNS != 0

    display_board(BOARD, simple=simple)
    cursor_down(10)
    clear_eol()
    print('')
    show_cursor()

    return again


def save_score():
    """Save game score"""
    cfgdir = NUMPOPPY_HOME.expanduser()
    scores = cfgdir / 'numpoppy-scores.txt'

    json_data = JSONFMT.format(score=SCORE, seed=SEED, moves=''.join(MOVES))
    timestamp = DATEFMT.format(datetime.datetime.utcnow())

    try:
        if not cfgdir.exists():
            cfgdir.mkdir(parents=True, exist_ok=True)
        with open(scores, 'a') as fptr:
            print('\t'.join([timestamp, json_data]), file=fptr)
    except PermissionError as error:
        die(error)
    except (FileExistsError, IsADirectoryError) as error:
        die(error)


def init_game(seed=None):
    """Initialize a game with seed SEED"""
    global SCORE, ARROW, TURNS, SEED, MOVES
    if seed is None:
        SEED = int(round(time.time()))
    elif seed.isdigit():
        SEED = int(seed)
    else:
        SEED = seed
    random.seed(SEED)
    SCORE = 0
    ARROW = 4
    TURNS = 10
    MOVES = []


def main(progname=__whoami__):
    """Main entry point"""
    debug('argv', sys.argv)

    parser = argparse.ArgumentParser(
        prog=progname,
        formatter_class=argparse.RawTextHelpFormatter,
        epilog=EPILOG
    )
    # Generic options
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s/{}'.format(__version__),
                        help='show version information and exit')
    parser.add_argument('-c', '--copyright', action='version',
                        version=__copyright__,
                        help='show copying policy and exit')
    # Specific options
    parser.add_argument('-s', '--simple', action='store_true',
                        help='use simple box drawing')
    # Positional argument
    parser.add_argument('SEED', nargs='?',
                        help='initialize random shuffling with SEED')

    args = parser.parse_args()
    debug('args', args)

    tsize = shutil.get_terminal_size()
    debug('size', tsize)

    if tsize.columns < MINCOLS or tsize.lines < MINROWS:
        error = 'Terminal MUST be at least {}×{} (is {}×{}).'.format(
            MINCOLS, MINROWS,
            tsize.columns, tsize.lines
        )
        die(error)

    init_game(args.SEED)

    try:
        again = True
        while again:
            again = play(args.simple)
            if again:
                init_game()
            elif not TURNS:
                save_score()
    except Exception as error:
        show_cursor()
        die(error)

    return 0


if __name__ == '__main__':
    sys.exit(main(pathlib.Path(sys.argv[0]).name))

# eof
